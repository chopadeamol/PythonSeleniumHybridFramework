{"name": "test_addCustomer", "status": "broken", "statusDetails": {"message": "ValueError: setup did not yield a value", "trace": "cls = <class '_pytest.runner.CallInfo'>, func = <function call_and_report.<locals>.<lambda> at 0x000001721C54A280>, when = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: Callable[[], TResult],\n        when: Literal[\"collect\", \"setup\", \"call\", \"teardown\"],\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\nvenv\\lib\\site-packages\\_pytest\\runner.py:341: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\_pytest\\runner.py:241: in <lambda>\n    lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise\nvenv\\lib\\site-packages\\pluggy\\_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nvenv\\lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nvenv\\lib\\site-packages\\_pytest\\unraisableexception.py:85: in pytest_runtest_setup\n    yield from unraisable_exception_runtest_hook()\nvenv\\lib\\site-packages\\_pytest\\unraisableexception.py:65: in unraisable_exception_runtest_hook\n    yield\nvenv\\lib\\site-packages\\_pytest\\logging.py:844: in pytest_runtest_setup\n    yield from self._runtest_for(item, \"setup\")\nvenv\\lib\\site-packages\\_pytest\\logging.py:833: in _runtest_for\n    yield\nvenv\\lib\\site-packages\\_pytest\\capture.py:873: in pytest_runtest_setup\n    return (yield)\nvenv\\lib\\site-packages\\_pytest\\threadexception.py:82: in pytest_runtest_setup\n    yield from thread_exception_runtest_hook()\nvenv\\lib\\site-packages\\_pytest\\threadexception.py:63: in thread_exception_runtest_hook\n    yield\nvenv\\lib\\site-packages\\_pytest\\runner.py:159: in pytest_runtest_setup\n    item.session._setupstate.setup(item)\nvenv\\lib\\site-packages\\_pytest\\runner.py:517: in setup\n    raise exc\nvenv\\lib\\site-packages\\_pytest\\runner.py:514: in setup\n    col.setup()\nvenv\\lib\\site-packages\\_pytest\\python.py:1635: in setup\n    self._request._fillfixtures()\nvenv\\lib\\site-packages\\_pytest\\fixtures.py:686: in _fillfixtures\n    item.funcargs[argname] = self.getfixturevalue(argname)\nvenv\\lib\\site-packages\\_pytest\\fixtures.py:521: in getfixturevalue\n    fixturedef = self._get_active_fixturedef(argname)\nvenv\\lib\\site-packages\\_pytest\\fixtures.py:606: in _get_active_fixturedef\n    fixturedef.execute(request=subrequest)\nvenv\\lib\\site-packages\\_pytest\\fixtures.py:1076: in execute\n    result = ihook.pytest_fixture_setup(fixturedef=self, request=request)\nvenv\\lib\\site-packages\\pluggy\\_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nvenv\\lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nvenv\\lib\\site-packages\\_pytest\\setuponly.py:36: in pytest_fixture_setup\n    return (yield)\nvenv\\lib\\site-packages\\_pytest\\fixtures.py:1125: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfixturefunc = <function setup at 0x000001721BFE5CA0>, request = <SubRequest 'setup' for <Function test_addCustomer>>, kwargs = {'browser': 'chrome'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n>               raise ValueError(f\"{request.fixturename} did not yield a value\") from None\nE               ValueError: setup did not yield a value\n\nvenv\\lib\\site-packages\\_pytest\\fixtures.py:882: ValueError"}, "attachments": [{"name": "log", "source": "9b683171-30cb-4ce5-a10b-ecc7f91c2618-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "9a747735-b444-4eb6-a88a-e1c3ffc6681f-attachment.txt", "type": "text/plain"}], "start": 1718219656434, "stop": 1718219656434, "uuid": "9b9aac9c-2a8b-489d-a377-537b2ac7ddff", "historyId": "ecf45be1296c99ca6a140b8b62c18912", "testCaseId": "ecf45be1296c99ca6a140b8b62c18912", "fullName": "test_addCustomer.Test_003_AddCustomer#test_addCustomer", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "Add Customer feature"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "sanity"}, {"name": "suite", "value": "test_addCustomer"}, {"name": "subSuite", "value": "Test_003_AddCustomer"}, {"name": "host", "value": "LAPTOP-1DHDHJLP"}, {"name": "thread", "value": "15632-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_addCustomer"}]}